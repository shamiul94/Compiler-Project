At line no: 1 : type_specifier	: INT

int

At line no: 1 : declaration_list : ID

x

At line no: 1 : declaration_list : declaration_list COMMA ID

x , y

ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> 
3 --> 
4 --> 
5 --> 
6 --> 
7 --> 
8 --> 
9 --> 
10 --> 


At line no: 1 : declaration_list : declaration_list COMMA ID

x , y , z

ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> 
3 --> 
4 --> 
5 --> 
6 --> 
7 --> 
8 --> 
9 --> 
10 --> < z,ID,INT,VAR, >


At line no: 1 : var_declaration : type_specifier declaration_list SEMICOLON

int x , y , z ;

At line no: 1 : unit : var_declaration

int x , y , z ;


At line no: 1 : program : unit

int x , y , z ;

At line no: 1 : type_specifier	: FLOAT

float

At line no: 1 : declaration_list : ID

a

At line no: 1 : var_declaration : type_specifier declaration_list SEMICOLON

float a ;

At line no: 1 : unit : var_declaration

float a ;


At line no: 1 : program : program unit

int x , y , z ;
 float a ;


At line no: 3 : type_specifier	: INT

int

At line no: 3 : declaration_list : ID

h

At line no: 3 : var_declaration : type_specifier declaration_list SEMICOLON

int h ;

At line no: 3 : unit : var_declaration

int h ;


At line no: 3 : program : program unit

int x , y , z ;
 float a ;
 int h ;


At line no: 5 : type_specifier	: INT

int

At line no: 5 : type_specifier	: INT

int

At line no: 5 : parameter_list  : type_specifier ID

int a

At line no: 5 : type_specifier	: INT

int

At line no: 5 : parameter_list  : parameter_list COMMA type_specifier ID

int a , int b

At line no: 5 : func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int loo(int a , int b) ;

At line no: 5 : unit : func_declaration

int loo(int a , int b) ;

At line no: 5 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ;

At line no: 7 : type_specifier	: INT

int

At line no: 7 : type_specifier	: INT

int

At line no: 7 : parameter_list  : type_specifier ID

int a

At line no: 7 : type_specifier	: FLOAT

float

At line no: 7 : parameter_list  : parameter_list COMMA type_specifier ID

int a , float b

At line no: 9 : compound_statement : LCURL statements RCURL

At line no: 9 : factor	: CONST_INT 

0

At line no: 9 : unary_expression : NOT unary_expression

0

At line no: 9 : term :	unary_expression

At line no: 9 : simple_expression : term

0

At line no: 9 : rel_expression	: simple_expression

0

At line no: 9 : logic_expression : rel_expression

0

At line no: 9 : expression : logic_expression

0

At line no: 9 : statement : RETURN expression SEMICOLON

return 0 ;

At line no: 9 : statements : statement

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> 
6 --> 
7 --> < b,ID,FLOAT,VAR, >
8 --> < a,ID,INT,VAR, >
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> 
4 --> 
5 --> 
6 --> < h,ID,INT,VAR, >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >
{return 0 ;}

Scope exited
At line no: 10 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int loo( int a , float b ) 
{return 0 ;}

At line no: 10 : unit : func_definition

int loo( int a , float b ) 
{return 0 ;}

At line no: 10 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;}

At line no: 13 : type_specifier	: INT

int

At line no: 13 : type_specifier	: INT

int

At line no: 13 : parameter_list  : type_specifier

int

At line no: 13 : func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int h(int) ;

At line no: 13 : unit : func_declaration

int h(int) ;

At line no: 13 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ;

At line no: 15 : type_specifier	: INT

int

At line no: 17 : compound_statement : LCURL statements RCURL

At line no: 17 : factor	: CONST_INT 

4

At line no: 17 : unary_expression : NOT unary_expression

4

At line no: 17 : term :	unary_expression

At line no: 17 : simple_expression : term

4

At line no: 17 : rel_expression	: simple_expression

4

At line no: 17 : logic_expression : rel_expression

4

At line no: 17 : expression : logic_expression

4

At line no: 17 : statement : RETURN expression SEMICOLON

return 4 ;

At line no: 17 : statements : statement

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> 
6 --> 
7 --> 
8 --> 
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> 
4 --> 
5 --> 
6 --> < h,ID,INT,VAR, >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >
{return 4 ;}

Scope exited
At line no: 18 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

int pool( ) 
{return 4 ;}

At line no: 18 : unit : func_definition

int pool( ) 
{return 4 ;}

At line no: 18 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ; int pool( ) 
{return 4 ;}

At line no: 21 : type_specifier	: INT

int

At line no: 21 : type_specifier	: INT

int

At line no: 21 : parameter_list  : type_specifier ID

int a

At line no: 22 : compound_statement : LCURL statements RCURL

At line no: 22 : type_specifier	: INT

int

At line no: 22 : declaration_list : ID

h

At line no: 22 : var_declaration : type_specifier declaration_list SEMICOLON

int h ;

At line no: 22 : statement : var_declaration

int h ;


At line no: 22 : statements : statement

At line no: 23 : variable : ID

a

At line no: 23 : factor	: variable 

a

At line no: 23 : unary_expression : NOT unary_expression

a

At line no: 23 : term :	unary_expression

At line no: 23 : simple_expression : term

a

At line no: 23 : rel_expression	: simple_expression

a

At line no: 23 : logic_expression : rel_expression

a

At line no: 23 : expression : logic_expression

a

At line no: 23 : statement : RETURN expression SEMICOLON

return a ;

At line no: 23 : statements : statements statement

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> 
6 --> < h,ID,INT,VAR, >
7 --> 
8 --> < a,ID,INT,VAR, >
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> 
4 --> 
5 --> 
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >
{int h ;
return a ;}

Scope exited
At line no: 24 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var( int a ) 
{int h ;
return a ;}

At line no: 24 : unit : func_definition

int var( int a ) 
{int h ;
return a ;}

At line no: 24 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ; int pool( ) 
{return 4 ;} int var( int a ) 
{int h ;
return a ;}

At line no: 26 : type_specifier	: VOID

void

At line no: 26 : type_specifier	: INT

int

At line no: 26 : parameter_list  : type_specifier ID

int b

At line no: 27 : compound_statement : LCURL statements RCURL

At line no: 27 : variable : ID

x

At line no: 27 : factor	: CONST_INT 

2

At line no: 27 : unary_expression : NOT unary_expression

2

At line no: 27 : term :	unary_expression

At line no: 27 : simple_expression : term

2

At line no: 27 : rel_expression	: simple_expression

2

At line no: 27 : logic_expression : rel_expression

2

At line no: 27 : expression : variable ASSIGNOP logic_expression

x = 2

At line no: 27 : expression_statement 	: expression SEMICOLON

x = 2;

At line no: 27 : statement : expression_statement

x = 2;


At line no: 27 : statements : statement

At line no: 28 : variable : ID

y

At line no: 28 : variable : ID

x

At line no: 28 : factor	: variable 

x

At line no: 28 : unary_expression : NOT unary_expression

x

At line no: 28 : term :	unary_expression

At line no: 28 : simple_expression : term

x

At line no: 28 : factor	: CONST_INT 

5

At line no: 28 : unary_expression : NOT unary_expression

5

At line no: 28 : term :	unary_expression

At line no: 28 : simple_expression : simple_expression ADDOP term

x -5

At line no: 28 : rel_expression	: simple_expression

x-5

At line no: 28 : logic_expression : rel_expression

x-5

At line no: 28 : expression : variable ASSIGNOP logic_expression

y = x-5

At line no: 28 : expression_statement 	: expression SEMICOLON

y = x-5;

At line no: 28 : statement : expression_statement

y = x-5;


At line no: 28 : statements : statements statement

At line no: 29 : variable : ID

x

At line no: 29 : factor	: variable INCOP 

x++

At line no: 29 : unary_expression : NOT unary_expression

x++

At line no: 29 : term :	unary_expression

At line no: 29 : simple_expression : term

x++

At line no: 29 : rel_expression	: simple_expression

x++

At line no: 29 : logic_expression : rel_expression

x++

At line no: 29 : expression : logic_expression

x++

At line no: 29 : expression_statement 	: expression SEMICOLON

x++;

At line no: 29 : statement : expression_statement

x++;


At line no: 29 : statements : statements statement

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> 
6 --> 
7 --> < b,ID,INT,VAR, >
8 --> 
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> 
4 --> 
5 --> < var,ID,,FUNC,INT >
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >
{xy = x-5;
x++;
}

Scope exited
At line no: 30 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void foo( int b ) 
{xy = x-5;
x++;
}

At line no: 30 : unit : func_definition

void foo( int b ) 
{xy = x-5;
x++;
}

At line no: 30 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ; int pool( ) 
{return 4 ;} int var( int a ) 
{int h ;
return a ;} void foo( int b ) 
{xy = x-5;
x++;
}

At line no: 33 : type_specifier	: INT

int

At line no: 34 : compound_statement : LCURL statements RCURL

At line no: 34 : type_specifier	: INT

int

At line no: 34 : declaration_list : ID LTHIRD CONST_INT RTHIRD

a[2]

At line no: 34 : declaration_list : declaration_list COMMA ID

a[2] , c

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> 
6 --> < c,ID,INT,VAR, >
7 --> 
8 --> < a,ID,INT,ARR, >
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> < foo,ID,,FUNC,VOID >
4 --> 
5 --> < var,ID,,FUNC,INT >
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >


At line no: 34 : declaration_list : declaration_list COMMA ID

a[2] , c , i

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> 
5 --> < i,ID,INT,VAR, >
6 --> < c,ID,INT,VAR, >
7 --> 
8 --> < a,ID,INT,ARR, >
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> < foo,ID,,FUNC,VOID >
4 --> 
5 --> < var,ID,,FUNC,INT >
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >


At line no: 34 : declaration_list : declaration_list COMMA ID

a[2] , c , i , j

ScopeTable # 2
0 --> 
1 --> 
2 --> 
3 --> 
4 --> < j,ID,INT,VAR, >
5 --> < i,ID,INT,VAR, >
6 --> < c,ID,INT,VAR, >
7 --> 
8 --> < a,ID,INT,ARR, >
9 --> 
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> < foo,ID,,FUNC,VOID >
4 --> 
5 --> < var,ID,,FUNC,INT >
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >


At line no: 34 : var_declaration : type_specifier declaration_list SEMICOLON

int a[2] , c , i , j ;

At line no: 34 : statement : var_declaration

int a[2] , c , i , j ;


At line no: 34 : statements : statement

At line no: 34 : type_specifier	: FLOAT

float

At line no: 34 : declaration_list : ID

d

At line no: 34 : var_declaration : type_specifier declaration_list SEMICOLON

float d ;

At line no: 34 : statement : var_declaration

float d ;


At line no: 34 : statements : statements statement

At line no: 35 : type_specifier	: INT

int

At line no: 35 : declaration_list : ID

ll

At line no: 35 : var_declaration : type_specifier declaration_list SEMICOLON

int ll ;

At line no: 35 : statement : var_declaration

int ll ;


At line no: 35 : statements : statements statement

At line no: 37 : type_specifier	: FLOAT

float

At line no: 37 : declaration_list : ID

f

At line no: 37 : var_declaration : type_specifier declaration_list SEMICOLON

float f ;

At line no: 37 : statement : var_declaration

float f ;


At line no: 37 : statements : statements statement

At line no: 38 : variable : ID

f

At line no: 38 : factor	: CONST_INT 

2

At line no: 38 : unary_expression : NOT unary_expression

2

At line no: 38 : term :	unary_expression

At line no: 38 : simple_expression : term

2

At line no: 38 : rel_expression	: simple_expression

2

At line no: 38 : logic_expression : rel_expression

2

At line no: 38 : expression : variable ASSIGNOP logic_expression

f = 2

At line no: 38 : expression_statement 	: expression SEMICOLON

f = 2;

At line no: 38 : statement : expression_statement

f = 2;


At line no: 38 : statements : statements statement

At line no: 40 : variable : ID

ll

At line no: 40 : factor	: CONST_INT 

3

At line no: 40 : unary_expression : NOT unary_expression

3

At line no: 40 : term :	unary_expression

At line no: 40 : simple_expression : term

3

At line no: 40 : variable : ID

c

At line no: 40 : factor	: variable 

c

At line no: 40 : unary_expression : NOT unary_expression

c

At line no: 40 : term :	unary_expression

At line no: 40 : simple_expression : term

c

At line no: 40 : rel_expression	: simple_expression RELOP simple_expression

3<c

3<c

At line no: 40 : logic_expression : rel_expression

3<c

At line no: 40 : expression : logic_expression

3<c

At line no: 40 : factor	: LPAREN expression RPAREN 

(3<c)

At line no: 40 : unary_expression : NOT unary_expression

(3<c)

At line no: 40 : term :	unary_expression

At line no: 40 : simple_expression : term

(3<c)

At line no: 40 : rel_expression	: simple_expression

(3<c)

At line no: 40 : logic_expression : rel_expression

(3<c)

At line no: 40 : expression : variable ASSIGNOP logic_expression

ll = (3<c)

At line no: 40 : expression_statement 	: expression SEMICOLON

ll = (3<c);

At line no: 40 : statement : expression_statement

ll = (3<c);


At line no: 40 : statements : statements statement

At line no: 42 : factor	: CONST_INT 

3

At line no: 42 : unary_expression : NOT unary_expression

3

At line no: 42 : term :	unary_expression

At line no: 42 : simple_expression : term

3

At line no: 42 : rel_expression	: simple_expression

3

At line no: 42 : logic_expression : rel_expression

3

At line no: 42 : expression : logic_expression

3

At line no: 42 : variable : ID LTHIRD expression RTHIRD

i[3]

At line no: 42 : factor	: CONST_INT 

4

At line no: 42 : unary_expression : NOT unary_expression

4

At line no: 42 : term :	unary_expression

At line no: 42 : simple_expression : term

4

At line no: 42 : rel_expression	: simple_expression

4

At line no: 42 : logic_expression : rel_expression

4

At line no: 42 : expression : variable ASSIGNOP logic_expression

i[3] = 4

At line no: 42 : expression_statement 	: expression SEMICOLON

i[3] = 4;

At line no: 42 : statement : expression_statement

i[3] = 4;


At line no: 42 : statements : statements statement

At line no: 43 : factor	: CONST_INT 

5

At line no: 43 : unary_expression : NOT unary_expression

5

At line no: 43 : term :	unary_expression

At line no: 43 : simple_expression : term

5

At line no: 43 : rel_expression	: simple_expression

5

At line no: 43 : logic_expression : rel_expression

5

At line no: 43 : expression : logic_expression

5

At line no: 43 : variable : ID LTHIRD expression RTHIRD

a[5]

At line no: 43 : factor	: CONST_INT 

5

At line no: 43 : unary_expression : NOT unary_expression

5

At line no: 43 : term :	unary_expression

At line no: 43 : simple_expression : term

5

At line no: 43 : rel_expression	: simple_expression

5

At line no: 43 : logic_expression : rel_expression

5

At line no: 43 : expression : variable ASSIGNOP logic_expression

a[5] = 5

At line no: 43 : expression_statement 	: expression SEMICOLON

a[5] = 5;

At line no: 43 : statement : expression_statement

a[5] = 5;


At line no: 43 : statements : statements statement

At line no: 44 : factor	: CONST_INT 

0

At line no: 44 : unary_expression : NOT unary_expression

0

At line no: 44 : term :	unary_expression

At line no: 44 : simple_expression : term

0

At line no: 44 : rel_expression	: simple_expression

0

At line no: 44 : logic_expression : rel_expression

0

At line no: 44 : expression : logic_expression

0

At line no: 44 : variable : ID LTHIRD expression RTHIRD

a[0]

At line no: 44 : factor	: CONST_FLOAT 

1.7

At line no: 44 : unary_expression : NOT unary_expression

1.7

At line no: 44 : term :	unary_expression

At line no: 44 : simple_expression : term

1.7

At line no: 44 : rel_expression	: simple_expression

1.7

At line no: 44 : logic_expression : rel_expression

1.7

At line no: 44 : expression : variable ASSIGNOP logic_expression

a[0] = 1.7

At line no: 44 : expression_statement 	: expression SEMICOLON

a[0] = 1.7;

At line no: 44 : statement : expression_statement

a[0] = 1.7;


At line no: 44 : statements : statements statement

At line no: 45 : factor	: CONST_INT 

1

At line no: 45 : unary_expression : NOT unary_expression

1

At line no: 45 : term :	unary_expression

At line no: 45 : simple_expression : term

1

At line no: 45 : rel_expression	: simple_expression

1

At line no: 45 : logic_expression : rel_expression

1

At line no: 45 : expression : logic_expression

1

At line no: 45 : variable : ID LTHIRD expression RTHIRD

a[1]

At line no: 45 : factor	: CONST_INT 

5

At line no: 45 : unary_expression : NOT unary_expression

5

At line no: 45 : term :	unary_expression

At line no: 45 : simple_expression : term

5

At line no: 45 : rel_expression	: simple_expression

5

At line no: 45 : logic_expression : rel_expression

5

At line no: 45 : expression : variable ASSIGNOP logic_expression

a[1] = 5

At line no: 45 : expression_statement 	: expression SEMICOLON

a[1] = 5;

At line no: 45 : statement : expression_statement

a[1] = 5;


At line no: 45 : statements : statements statement

At line no: 46 : variable : ID

i

At line no: 46 : factor	: CONST_FLOAT 

0.5

At line no: 46 : unary_expression : NOT unary_expression

0.5

At line no: 46 : term :	unary_expression

At line no: 46 : simple_expression : term

0.5

At line no: 46 : rel_expression	: simple_expression

0.5

At line no: 46 : logic_expression : rel_expression

0.5

At line no: 46 : expression : logic_expression

0.5

At line no: 46 : variable : ID LTHIRD expression RTHIRD

a[0.5]

At line no: 46 : factor	: variable 

a[0.5]

At line no: 46 : unary_expression : NOT unary_expression

a[0.5]

At line no: 46 : term :	unary_expression

At line no: 46 : simple_expression : term

a[0.5]

At line no: 46 : factor	: CONST_FLOAT 

1.5

At line no: 46 : unary_expression : NOT unary_expression

1.5

At line no: 46 : term :	unary_expression

At line no: 46 : simple_expression : term

1.5

At line no: 46 : rel_expression	: simple_expression

1.5

At line no: 46 : logic_expression : rel_expression

1.5

At line no: 46 : expression : logic_expression

1.5

At line no: 46 : variable : ID LTHIRD expression RTHIRD

a[1.5]

At line no: 46 : factor	: variable 

a[1.5]

At line no: 46 : unary_expression : NOT unary_expression

a[1.5]

At line no: 46 : term :	unary_expression

At line no: 46 : simple_expression : simple_expression ADDOP term

a[1.5] +a[1.5]

At line no: 46 : rel_expression	: simple_expression

a[1.5]+a[1.5]

At line no: 46 : logic_expression : rel_expression

a[1.5]+a[1.5]

At line no: 46 : expression : variable ASSIGNOP logic_expression

i = a[1.5]+a[1.5]

At line no: 46 : expression_statement 	: expression SEMICOLON

i = a[1.5]+a[1.5];

At line no: 46 : statement : expression_statement

i = a[1.5]+a[1.5];


At line no: 46 : statements : statements statement

At line no: 47 : variable : ID

c

At line no: 47 : factor	: CONST_INT 

2

At line no: 47 : unary_expression : NOT unary_expression

2

At line no: 47 : term :	unary_expression

At line no: 47 : factor	: CONST_FLOAT 

3.5

At line no: 47 : unary_expression : NOT unary_expression

3.5

At line no: 47 : term :	term MULOP unary_expression

2 *3.5

At line no: 47 : simple_expression : term

2*3.5

At line no: 47 : factor	: CONST_INT 

4

At line no: 47 : unary_expression : NOT unary_expression

4

At line no: 47 : term :	unary_expression

At line no: 47 : factor	: CONST_INT 

5

At line no: 47 : unary_expression : NOT unary_expression

5

At line no: 47 : term :	term MULOP unary_expression

4 %5

At line no: 47 : simple_expression : term

4%5

At line no: 47 : rel_expression	: simple_expression

4%5

At line no: 47 : logic_expression : rel_expression

4%5

At line no: 47 : expression : logic_expression

4%5

At line no: 47 : factor	: LPAREN expression RPAREN 

(4%5)

At line no: 47 : unary_expression : NOT unary_expression

(4%5)

At line no: 47 : term :	unary_expression

At line no: 47 : simple_expression : term

(4%5)

At line no: 47 : rel_expression	: simple_expression

(4%5)

At line no: 47 : factor	: CONST_INT 

2

At line no: 47 : unary_expression : NOT unary_expression

2

At line no: 47 : term :	unary_expression

At line no: 47 : simple_expression : term

2

At line no: 47 : rel_expression	: simple_expression

2

At line no: 47 : logic_expression : rel_expression LOGICOP rel_expression

(4%5)||2

At line no: 47 : expression : logic_expression

(4%5)||2

At line no: 47 : factor	: LPAREN expression RPAREN 

((4%5)||2)

At line no: 47 : unary_expression : NOT unary_expression

((4%5)||2)

At line no: 47 : term :	unary_expression

At line no: 47 : simple_expression : simple_expression ADDOP term

2*3.5 +((4%5)||2)

At line no: 47 : rel_expression	: simple_expression

2*3.5+((4%5)||2)

At line no: 47 : logic_expression : rel_expression

2*3.5+((4%5)||2)

At line no: 47 : expression : variable ASSIGNOP logic_expression

c = 2*3.5+((4%5)||2)

At line no: 47 : expression_statement 	: expression SEMICOLON

c = 2*3.5+((4%5)||2);

At line no: 47 : statement : expression_statement

c = 2*3.5+((4%5)||2);


At line no: 47 : statements : statements statement

At line no: 48 : variable : ID

j

At line no: 48 : factor	: CONST_INT 

2

At line no: 48 : unary_expression : NOT unary_expression

2

At line no: 48 : term :	unary_expression

At line no: 48 : factor	: CONST_FLOAT 

3.5

At line no: 48 : unary_expression : NOT unary_expression

3.5

At line no: 48 : term :	term MULOP unary_expression

2 *3.5

At line no: 48 : simple_expression : term

2*3.5

At line no: 48 : factor	: CONST_INT 

5

At line no: 48 : unary_expression : NOT unary_expression

5

At line no: 48 : term :	unary_expression

At line no: 48 : factor	: CONST_FLOAT 

3.5

At line no: 48 : unary_expression : NOT unary_expression

3.5

At line no: 48 : term :	term MULOP unary_expression

5 %3.5

At line no: 48 : simple_expression : term

5%3.5

At line no: 48 : factor	: CONST_INT 

4

At line no: 48 : unary_expression : NOT unary_expression

4

At line no: 48 : term :	unary_expression

At line no: 48 : simple_expression : term

4

At line no: 48 : rel_expression	: simple_expression RELOP simple_expression

5%3.5<4

5%3.5<4

At line no: 48 : factor	: CONST_INT 

8

At line no: 48 : unary_expression : NOT unary_expression

8

At line no: 48 : term :	unary_expression

At line no: 48 : simple_expression : term

8

At line no: 48 : rel_expression	: simple_expression

8

At line no: 48 : logic_expression : rel_expression LOGICOP rel_expression

5%3.5<4&&8

At line no: 48 : expression : logic_expression

5%3.5<4&&8

At line no: 48 : factor	: LPAREN expression RPAREN 

(5%3.5<4&&8)

At line no: 48 : unary_expression : NOT unary_expression

(5%3.5<4&&8)

At line no: 48 : term :	unary_expression

At line no: 48 : simple_expression : simple_expression ADDOP term

2*3.5 +(5%3.5<4&&8)

At line no: 48 : rel_expression	: simple_expression

2*3.5+(5%3.5<4&&8)

At line no: 48 : factor	: CONST_INT 

2

At line no: 48 : unary_expression : NOT unary_expression

2

At line no: 48 : term :	unary_expression

At line no: 48 : simple_expression : term

2

At line no: 48 : rel_expression	: simple_expression

2

At line no: 48 : logic_expression : rel_expression LOGICOP rel_expression

2*3.5+(5%3.5<4&&8)||2

At line no: 48 : expression : variable ASSIGNOP logic_expression

j = 2*3.5+(5%3.5<4&&8)||2

At line no: 48 : expression_statement 	: expression SEMICOLON

j = 2*3.5+(5%3.5<4&&8)||2;

At line no: 48 : statement : expression_statement

j = 2*3.5+(5%3.5<4&&8)||2;


At line no: 48 : statements : statements statement

At line no: 49 : variable : ID

i

At line no: 49 : factor	: CONST_INT 

2

At line no: 49 : unary_expression : NOT unary_expression

2

At line no: 49 : term :	unary_expression

At line no: 49 : simple_expression : term

2

At line no: 49 : rel_expression	: simple_expression

2

At line no: 49 : logic_expression : rel_expression

2

At line no: 49 : arguments : logic_expression

2
At line no: 49 : argument_list : arguments

2

At line no: 49 : factor	: ID LPAREN argument_list RPAREN  

pool(2)

At line no: 49 : unary_expression : NOT unary_expression



At line no: 49 : term :	unary_expression

At line no: 49 : simple_expression : term



At line no: 49 : rel_expression	: simple_expression



At line no: 49 : logic_expression : rel_expression



At line no: 49 : expression : variable ASSIGNOP logic_expression

i = 

At line no: 49 : expression_statement 	: expression SEMICOLON

i = ;

At line no: 49 : statement : expression_statement

i = ;


At line no: 49 : statements : statements statement

At line no: 50 : variable : ID

j

At line no: 50 : factor	: ID LPAREN argument_list RPAREN  

foo(2)

At line no: 50 : unary_expression : NOT unary_expression



At line no: 50 : term :	unary_expression

At line no: 50 : simple_expression : term



At line no: 50 : rel_expression	: simple_expression



At line no: 50 : logic_expression : rel_expression



At line no: 50 : expression : variable ASSIGNOP logic_expression

j = 

At line no: 50 : expression_statement 	: expression SEMICOLON

j = ;

At line no: 50 : statement : expression_statement

j = ;


At line no: 50 : statements : statements statement

At line no: 51 : variable : ID

d

At line no: 51 : factor	: CONST_INT 

1

At line no: 51 : unary_expression : NOT unary_expression

1

At line no: 51 : term :	unary_expression

At line no: 51 : simple_expression : term

1

At line no: 51 : rel_expression	: simple_expression

1

At line no: 51 : logic_expression : rel_expression

1

At line no: 51 : arguments : logic_expression

1
At line no: 51 : factor	: CONST_INT 

2

At line no: 51 : unary_expression : NOT unary_expression

2

At line no: 51 : term :	unary_expression

At line no: 51 : simple_expression : term

2

At line no: 51 : rel_expression	: simple_expression

2

At line no: 51 : logic_expression : rel_expression

2

At line no: 51 : arguments : arguments COMMA logic_expression 

1 , 2

At line no: 51 : argument_list : arguments

1,2

At line no: 51 : factor	: ID LPAREN argument_list RPAREN  

a(1,2)

At line no: 51 : unary_expression : NOT unary_expression



At line no: 51 : term :	unary_expression

At line no: 51 : simple_expression : term



At line no: 51 : factor	: CONST_FLOAT 

3.5

At line no: 51 : unary_expression : NOT unary_expression

3.5

At line no: 51 : term :	unary_expression

At line no: 51 : factor	: CONST_INT 

2

At line no: 51 : unary_expression : NOT unary_expression

2

At line no: 51 : term :	term MULOP unary_expression

3.5 *2

At line no: 51 : simple_expression : simple_expression ADDOP term

 +3.5*2

At line no: 51 : rel_expression	: simple_expression

+3.5*2

At line no: 51 : logic_expression : rel_expression

+3.5*2

At line no: 51 : expression : variable ASSIGNOP logic_expression

d = +3.5*2

At line no: 51 : expression_statement 	: expression SEMICOLON

d = +3.5*2;

At line no: 51 : statement : expression_statement

d = +3.5*2;


At line no: 51 : statements : statements statement

At line no: 52 : factor	: CONST_INT 

0

At line no: 52 : unary_expression : NOT unary_expression

0

At line no: 52 : term :	unary_expression

At line no: 52 : simple_expression : term

0

At line no: 52 : rel_expression	: simple_expression

0

At line no: 52 : logic_expression : rel_expression

0

At line no: 52 : expression : logic_expression

0

At line no: 52 : statement : RETURN expression SEMICOLON

return 0 ;

At line no: 52 : statements : statements statement

ScopeTable # 2
0 --> < f,ID,FLOAT,VAR, >
1 --> 
2 --> < d,ID,FLOAT,VAR, >
3 --> 
4 --> < j,ID,INT,VAR, >
5 --> < i,ID,INT,VAR, >
6 --> < c,ID,INT,VAR, >
7 --> 
8 --> < a,ID,INT,ARR, >
9 --> < ll,ID,INT,VAR, >
10 --> 
ScopeTable # 1
0 --> < y,ID,INT,VAR, >
1 --> < x,ID,INT,VAR, >
2 --> < loo,ID,,FUNC,INT >
3 --> < foo,ID,,FUNC,VOID >
4 --> 
5 --> < var,ID,,FUNC,INT >
6 --> < h,ID,INT,VAR, > , < pool,ID,,FUNC,INT >
7 --> 
8 --> < a,ID,FLOAT,VAR, >
9 --> 
10 --> < z,ID,INT,VAR, >
{int a[2] , c , i , j ;
float d ;
int ll ;
float f ;
f = 2;
ll = (3<c);
i[3] = 4;
a[5] = 5;
a[0] = 1.7;
a[1] = 5;
i = a[1.5]+a[1.5];
c = 2*3.5+((4%5)||2);
j = 2*3.5+(5%3.5<4&&8)||2;
i = ;
j = ;
d = +3.5*2;
return 0 ;}

Scope exited
At line no: 53 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main( ) 
{int a[2] , c , i , j ;
float d ;
int ll ;
float f ;
f = 2;
ll = (3<c);
i[3] = 4;
a[5] = 5;
a[0] = 1.7;
a[1] = 5;
i = a[1.5]+a[1.5];
c = 2*3.5+((4%5)||2);
j = 2*3.5+(5%3.5<4&&8)||2;
i = ;
j = ;
d = +3.5*2;
return 0 ;}

At line no: 53 : unit : func_definition

int main( ) 
{int a[2] , c , i , j ;
float d ;
int ll ;
float f ;
f = 2;
ll = (3<c);
i[3] = 4;
a[5] = 5;
a[0] = 1.7;
a[1] = 5;
i = a[1.5]+a[1.5];
c = 2*3.5+((4%5)||2);
j = 2*3.5+(5%3.5<4&&8)||2;
i = ;
j = ;
d = +3.5*2;
return 0 ;}

At line no: 53 : program : program unit

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ; int pool( ) 
{return 4 ;} int var( int a ) 
{int h ;
return a ;} void foo( int b ) 
{xy = x-5;
x++;
} int main( ) 
{int a[2] , c , i , j ;
float d ;
int ll ;
float f ;
f = 2;
ll = (3<c);
i[3] = 4;
a[5] = 5;
a[0] = 1.7;
a[1] = 5;
i = a[1.5]+a[1.5];
c = 2*3.5+((4%5)||2);
j = 2*3.5+(5%3.5<4&&8)||2;
i = ;
j = ;
d = +3.5*2;
return 0 ;}

At line no: 53 : start : program

int x , y , z ;
 float a ;
 int h ;
 int loo(int a , int b) ; int loo( int a , float b ) 
{return 0 ;} int h(int) ; int pool( ) 
{return 4 ;} int var( int a ) 
{int h ;
return a ;} void foo( int b ) 
{xy = x-5;
x++;
} int main( ) 
{int a[2] , c , i , j ;
float d ;
int ll ;
float f ;
f = 2;
ll = (3<c);
i[3] = 4;
a[5] = 5;
a[0] = 1.7;
a[1] = 5;
i = a[1.5]+a[1.5];
c = 2*3.5+((4%5)||2);
j = 2*3.5+(5%3.5<4&&8)||2;
i = ;
j = ;
d = +3.5*2;
return 0 ;}

